alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo=[physicalSP-1];

alias ctr S3;

//EXIT
if(sysCallNo==10) then
	
	ctr=0;

	while(ctr<32)do 
		if([READY_LIST+32*ctr+1]==100+(PTBR-1024)/8) then
			[READY_LIST+32*ctr+1]=1;
		endif;
		ctr=ctr+1;
	endwhile;

	ctr=0;
	alias curPID S2;
	curPID=(PTBR-1024)/8;
	while(ctr<32) do
		if([READY_LIST+32*((ctr+curPID)%32)+1]==1) then
			break;
		endif;
		ctr=ctr+1;
	endwhile;

	if(ctr==32) then
		halt;
	endif;

	alias curpcb S4;
	curpcb=READY_LIST+32*(curPID);

	alias count S5;
	count=0;
	while(count<8) do
		if([curpcb+2*count+15]!=-1) then
			[FILE_TABLE+[curpcb+15+count*2]*2+1]=[FILE_TABLE+[curpcb+15+count*2]*2+1]-1;
			if([FILE_TABLE+[curpcb+15+count*2]*2+1]==0) then
				[FILE_TABLE+[curpcb+15+count*2]*2]=-1;
			endif;

			[curpcb+count*2+15]=-1;
			[curpcb+count*2+16]=0;

		endif;
		count=count+1;
	endwhile;

	[curpcb+1]=0;

	count=0;
	while(count<4) do
		if([PTBR+count*2]==-1) then
			count=count+1;
			continue;
		endif;

		if([PTBR+count*2+1]=="01" ||[PTBR+count*2+1]=="11" ) then
			[MEM_LIST+[PTBR+count*2]]=[MEM_LIST+[PTBR+count*2]]-1;
		endif;

		if([PTBR+count*2+1]=="00" && [PTBR+count*2]>447) then 
			[DISK_LIST+[PTBR+count*2]]=[DISK_LIST+[PTBR+count*2]]-1;
			store(6,20);
		endif;

		[PTBR+count*2]=-1;
		[PTBR+count*2+1]="00";
		count=count+1;
	endwhile;

	

endif;

if(sysCallNo==13) then
	alias waitingPID S3;
	waitingPID=[physicalSP-3];

	if([READY_LIST+32*waitingPID+1]==0 || [READY_LIST+32*waitingPID+1]==2) then
		[physicalSP-2]=-1;
		ireturn;
	endif;

	

	alias currentPCB S4;
	alias currentPID S5;
	currentPID=(PTBR-1024)/8;
	currentPCB = READY_LIST + 32 * currentPID;


	[ currentPCB + 2 ] = BP;
	[ currentPCB + 3 ] = SP - 1; 

	alias physicalSP S2;
	physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 

	// Save IP of current process in the PCB from the stack
	[ currentPCB + 4 ] = [ physicalSP ]; 

	[ currentPCB + 5 ] = PTBR;
	[ currentPCB + 6 ] = PTLR ; 

	[ currentPCB + 7 ] = R0; 
	[ currentPCB + 8 ] = R1;
	[ currentPCB + 9 ] = R2;
	[ currentPCB + 10 ] = R3;
	[ currentPCB + 11 ] = R4;
	[ currentPCB + 12 ] = R5;
	[ currentPCB + 13 ] = R6;
	[ currentPCB + 14 ] = R7;

	[currentPCB+1]=100+waitingPID;

	ctr=0;
	alias curPID S2;
	curPID=(PTBR-1024)/8;
	while(ctr<32) do
		if([READY_LIST+32*((ctr+curPID)%32)+1]==1) then
			break;
		endif;
		ctr=ctr+1;
	endwhile;
	
endif;

if(sysCallNo==10 || sysCallNo==13) then

	alias next S6;
	
	next=READY_LIST+32*ctr;

	BP=[next+2];	
	SP=[next+3];
	PTBR=[next+5];
	PTLR=[next+6];

	R0=[next+7];
	R1=[next+8];
	R2=[next+9];
	R3=[next+10];
	R4=[next+11];
	R5=[next+12];
	R6=[next+13];
	R7=[next+14];

	SP=SP+1;
	[([PTBR + 2 * (SP / 512)] * 512) + (SP % 512)]=[next+4];

	[next+1]=2;
	[physicalSP-2]=0;
	ireturn;
endif;

if(sysCallNo==14) then
	alias ctr S3;
	ctr=0;

	while(ctr<32)do 
		if([READY_LIST+32*ctr+1]==100+(PTBR-1024)/8) then
			[READY_LIST+32*ctr+1]=1;
		endif;
		ctr=ctr+1;
	endwhile;

	[physicalSP-2]=0;
	ireturn;

endif;
