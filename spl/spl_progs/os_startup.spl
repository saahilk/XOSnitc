
//exception handler
load(7,1);
load(8,2);

//interrupt 7
load(23,17);
load(24,18);

//init process
//PID
[READY_LIST + 0] = 0;


//load(25,21); // Load 1st page of code from disk to memory
//load(26,22); // Load 2nd page of code from disk to memory
//load(27,23); // Load 3rd page of code from disk to memory
PTBR = 1024;
PTLR=4;

[PTBR + 0] = 21; // Physical Page Number for Logical Page 0
[PTBR + 1] = "00"; // Auxiliary Information for Logical Page 0
[PTBR + 2] = 22; // Physical Page Number for Logical Page 1
[PTBR + 3] = "00"; // Auxiliary Information for Logical Page 1
[PTBR + 4] = 23; // Physical Page Number for Logical Page 2
[PTBR + 5] = "00"; // Auxiliary Information for Logical Page 2
[PTBR + 6] = 25; // Physical Page Number for Logical Page 3 (Stack)
[PTBR + 7] = "01"; // Auxiliary Information for Logical Page 3 (Stack)


// Load Interrupt 1 Routine from disk to memory
load (11, 5);
load (12, 6);
// Load Interrupt 2 Routine from disk to memory
load (13, 7);
load (14, 8);
// Load Interrupt 3 Routine from disk to memory
load (15, 9);
load (16, 10);
// Load Interrupt 4 Routine from disk to memory
load (17, 11);
load (18, 12);
// Load Interrupt 5 Routine from disk to memory
load (19, 13);
load (20, 14);
// Load Interrupt 6 Routine from disk to memory
load (21, 15);
load (22, 16);
// Load Interrupt 7 Routine from disk to memory
load (23, 17);
load (24, 18);

//fat-block
load(5,19);

//df-list 
load(6,20);

//timer

load (9, 3);
load (10, 4);



alias counter S0;
counter=448;

while(counter<512) do				//disk list set to 0 for swap area
	[DISK_LIST+counter]=0;
	counter=counter+1;
endwhile;

store(6,20);

counter=0;
while(counter<=25) do				//MEM_LIST 0-28 set to used(1)
	[MEM_LIST+counter]=1;
	counter=counter+1;
endwhile;
			
while(counter<64) do
	[MEM_LIST+counter]=0;
	counter=counter+1;
endwhile;

counter = 0;					//SWOT Entries
while ( counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;	

counter=0;

while(counter<32) do				//PCB state set to 0
	[READY_LIST+32*counter+1]=0;
	counter=counter+1;
endwhile;

counter=15;
while(counter<31) do
	[READY_LIST+counter]=-1;
	counter=counter+2;
endwhile;

[READY_LIST + 1] = 2; // Sets the entry for STATE as Running 

SP = 3 * 512; 

[25 * 512] = 0; // Set up the IP value for INIT in the stack 

ireturn;





